{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from \"react\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport { styles } from \"../styles/styles\";\nimport LanguagePicker from \"../components/LanguagePicker\";\nimport { useTranslation } from \"react-i18next\";\nimport \"./src/i18n.ts\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar options = [\"ENG\", \"SK\", \"UA\"];\nfunction SettingsScreen() {\n  var _useState = useState(\"en\"),\n    _useState2 = _slicedToArray(_useState, 2),\n    lang = _useState2[0],\n    useLang = _useState2[1];\n  var _useTranslation = useTranslation(),\n    t = _useTranslation.t,\n    _useTranslation$i18n = _useTranslation.i18n,\n    changeLanguage = _useTranslation$i18n.changeLanguage,\n    language = _useTranslation$i18n.language;\n  var _useState3 = useState(language),\n    _useState4 = _slicedToArray(_useState3, 2),\n    currentLanguage = _useState4[0],\n    setCurrentLanguage = _useState4[1];\n  var handleChangeLanguage = function handleChangeLanguage() {\n    var newLanguage = currentLanguage === \"en\" ? \"sk\" : \"en\";\n    setCurrentLanguage(newLanguage);\n    changeLanguage(newLanguage);\n  };\n  return _jsx(SafeAreaView, {\n    style: styles.app,\n    children: _jsx(LanguagePicker, {\n      foo: function foo() {}\n    })\n  });\n}\nexport default SettingsScreen;","map":{"version":3,"names":["React","useState","SafeAreaView","styles","LanguagePicker","useTranslation","jsx","_jsx","options","SettingsScreen","_useState","_useState2","_slicedToArray","lang","useLang","_useTranslation","t","_useTranslation$i18n","i18n","changeLanguage","language","_useState3","_useState4","currentLanguage","setCurrentLanguage","handleChangeLanguage","newLanguage","style","app","children","foo"],"sources":["/home/yurii/VSProjects/bakalarka/BCv2/bc-frontend/src/screens/SettingsScreen.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { SafeAreaView, View, Text } from \"react-native\";\nimport { styles } from \"../styles/styles\";\nimport DropDownPicker from \"react-native-dropdown-picker\";\nimport LanguagePicker from \"../components/LanguagePicker\";\nimport { useTranslation } from \"react-i18next\";\nimport \"./src/i18n.ts\";\n\nconst options = [\"ENG\", \"SK\", \"UA\"];\n\nfunction SettingsScreen() {\n  const [lang, useLang] = useState(\"en\");\n  const {\n    t,\n    i18n: { changeLanguage, language },\n  } = useTranslation();\n  const [currentLanguage, setCurrentLanguage] = useState(language);\n  const handleChangeLanguage = () => {\n    const newLanguage = currentLanguage === \"en\" ? \"sk\" : \"en\";\n    setCurrentLanguage(newLanguage);\n    changeLanguage(newLanguage);\n  };\n  return (\n    <SafeAreaView style={styles.app}>\n      <LanguagePicker foo={() => {}} />\n    </SafeAreaView>\n  );\n}\n\nexport default SettingsScreen;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,OAAAC,YAAA;AAExC,SAASC,MAAM;AAEf,OAAOC,cAAc;AACrB,SAASC,cAAc,QAAQ,eAAe;AAC9C;AAAuB,SAAAC,GAAA,IAAAC,IAAA;AAEvB,IAAMC,OAAO,GAAG,CAAC,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC;AAEnC,SAASC,cAAcA,CAAA,EAAG;EACxB,IAAAC,SAAA,GAAwBT,QAAQ,CAAC,IAAI,CAAC;IAAAU,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA/BG,IAAI,GAAAF,UAAA;IAAEG,OAAO,GAAAH,UAAA;EACpB,IAAAI,eAAA,GAGIV,cAAc,CAAC,CAAC;IAFlBW,CAAC,GAAAD,eAAA,CAADC,CAAC;IAAAC,oBAAA,GAAAF,eAAA,CACDG,IAAI;IAAIC,cAAc,GAAAF,oBAAA,CAAdE,cAAc;IAAEC,QAAQ,GAAAH,oBAAA,CAARG,QAAQ;EAElC,IAAAC,UAAA,GAA8CpB,QAAQ,CAACmB,QAAQ,CAAC;IAAAE,UAAA,GAAAV,cAAA,CAAAS,UAAA;IAAzDE,eAAe,GAAAD,UAAA;IAAEE,kBAAkB,GAAAF,UAAA;EAC1C,IAAMG,oBAAoB,GAAG,SAAvBA,oBAAoBA,CAAA,EAAS;IACjC,IAAMC,WAAW,GAAGH,eAAe,KAAK,IAAI,GAAG,IAAI,GAAG,IAAI;IAC1DC,kBAAkB,CAACE,WAAW,CAAC;IAC/BP,cAAc,CAACO,WAAW,CAAC;EAC7B,CAAC;EACD,OACEnB,IAAA,CAACL,YAAY;IAACyB,KAAK,EAAExB,MAAM,CAACyB,GAAI;IAAAC,QAAA,EAC9BtB,IAAA,CAACH,cAAc;MAAC0B,GAAG,EAAE,SAAAA,IAAA,EAAM,CAAC;IAAE,CAAE;EAAC,CACrB,CAAC;AAEnB;AAEA,eAAerB,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}